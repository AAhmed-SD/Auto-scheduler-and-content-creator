name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run black
      run: black . --check --exclude="migrations/|venv/|.venv/"
      
    - name: Run isort
      run: isort . --check-only --skip migrations --skip venv --skip .venv
      
    - name: Run mypy
      run: mypy app --ignore-missing-imports
      
    - name: Run Bandit
      run: bandit -r app/ -ll -ii -x tests/

  test:
    needs: lint
    strategy:
      matrix:
        environment: [development, staging]
    runs-on: ubuntu-latest
    environment: ${{ matrix.environment }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: autoscheduler_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create test env file
      run: |
        cat << EOF > .env.test
        DATABASE_URL=postgresql://postgres:postgres@localhost:5432/autoscheduler_test
        REDIS_HOST=localhost
        REDIS_PORT=6379
        TESTING=true
        SECRET_KEY=test_secret_key
        JWT_SECRET_KEY=test_jwt_secret
        EOF
        
    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/autoscheduler_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        TESTING: true
        SECRET_KEY: test_secret_key
        JWT_SECRET_KEY: test_jwt_secret
      run: |
        pytest --cov=app --cov-report=xml --cov-fail-under=80
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  docker:
    needs: test
    runs-on: ubuntu-latest
    environment: ${{ matrix.environment }}
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
      
    - name: Login to ECR
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build Docker image
      env:
        ECR_REGISTRY: 794010617385.dkr.ecr.us-east-1.amazonaws.com
      run: |
        docker build -t $ECR_REGISTRY/autoscheduler:${{ github.sha }} -f config/Dockerfile .
      
    - name: Create test env file for Docker
      run: |
        cat << EOF > .env.test
        DATABASE_URL=postgresql://postgres:postgres@postgres:5432/autoscheduler_test
        REDIS_HOST=redis
        REDIS_PORT=6379
        TESTING=true
        SECRET_KEY=test_secret_key
        JWT_SECRET_KEY=test_jwt_secret
        EOF
      
    - name: Run tests in Docker
      env:
        ECR_REGISTRY: 794010617385.dkr.ecr.us-east-1.amazonaws.com
      run: |
        docker network create test-network
        docker run --network test-network --name postgres -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=autoscheduler_test -d postgres:15
        docker run --network test-network --name redis -d redis:7
        docker run --network test-network --env-file .env.test $ECR_REGISTRY/autoscheduler:${{ github.sha }} pytest
        
    - name: Push Docker image
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      env:
        ECR_REGISTRY: 794010617385.dkr.ecr.us-east-1.amazonaws.com
      run: |
        docker push $ECR_REGISTRY/autoscheduler:${{ github.sha }} 