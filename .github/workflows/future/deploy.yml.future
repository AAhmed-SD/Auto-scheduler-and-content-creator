name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'development' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'development' }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Login to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.DOCKER_REGISTRY_URL }}
        username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
        password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"
    
    - name: Terraform Init
      run: |
        cd infrastructure/terraform
        terraform init \
          -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
          -backend-config="key=${{ secrets.TERRAFORM_STATE_KEY }}" \
          -backend-config="region=${{ secrets.TERRAFORM_STATE_REGION }}"
    
    - name: Build and Push Docker image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t ${{ secrets.DOCKER_REGISTRY_URL }}/autoscheduler:$IMAGE_TAG -f config/Dockerfile .
        docker push ${{ secrets.DOCKER_REGISTRY_URL }}/autoscheduler:$IMAGE_TAG
    
    - name: Create environment file
      run: |
        cat << EOF > .env.${{ github.event.inputs.environment || 'development' }}
        # Database & Cache
        DATABASE_URL=${{ secrets.DATABASE_URL }}
        REDIS_HOST=${{ secrets.REDIS_HOST }}
        REDIS_PORT=${{ secrets.REDIS_PORT }}
        REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
        
        # Supabase
        SUPABASE_URL=${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}
        SUPABASE_SERVICE_KEY=${{ secrets.SUPABASE_SERVICE_KEY }}
        
        # Social Media APIs
        INSTAGRAM_USERNAME=${{ secrets.INSTAGRAM_USERNAME }}
        INSTAGRAM_PASSWORD=${{ secrets.INSTAGRAM_PASSWORD }}
        GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}
        GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
        
        # AI Services
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        CLIP_API_KEY=${{ secrets.CLIP_API_KEY }}
        
        # Security & Authentication
        JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        
        # Email Service
        EMAIL_HOST=${{ secrets.EMAIL_HOST }}
        EMAIL_PORT=${{ secrets.EMAIL_PORT }}
        EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }}
        EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
        
        # Monitoring
        MONITORING_API_KEY=${{ secrets.MONITORING_API_KEY }}
        EOF
    
    - name: Deploy Infrastructure
      env:
        TF_VAR_environment: ${{ github.event.inputs.environment || 'development' }}
        TF_VAR_image_tag: ${{ github.sha }}
        TF_VAR_docker_registry: ${{ secrets.DOCKER_REGISTRY_URL }}
      run: |
        cd infrastructure/terraform
        terraform workspace select $TF_VAR_environment || terraform workspace new $TF_VAR_environment
        terraform plan -out=tfplan
        terraform apply -auto-approve tfplan
    
    - name: Update Services
      env:
        ENVIRONMENT: ${{ github.event.inputs.environment || 'development' }}
        AWS_ECS_CLUSTER: ${{ secrets.AWS_ECS_CLUSTER }}
        AWS_ECS_SERVICE: ${{ secrets.AWS_ECS_SERVICE }}
      run: |
        aws ecs update-service --cluster $AWS_ECS_CLUSTER --service $AWS_ECS_SERVICE --force-new-deployment
    
    - name: Configure Monitoring
      env:
        GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }}
        PROMETHEUS_ENDPOINT: ${{ secrets.PROMETHEUS_ENDPOINT }}
      run: |
        # Update monitoring configuration
        echo "Configuring monitoring for ${{ github.event.inputs.environment || 'development' }}"
    
    - name: Update CDN
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
      run: |
        # Purge CDN cache and update configurations
        echo "Updating CDN configuration"
    
    - name: Notify Deployment Status
      if: always()
      run: |
        echo "Deployment to ${{ github.event.inputs.environment || 'development' }} completed with status ${{ job.status }}" 