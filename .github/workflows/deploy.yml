name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_IMAGE: auto-scheduler
  DOCKER_TAG: ${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to production
        run: |
          # SSH into production server
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            # Pull the new image
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
            
            # Stop and remove old container
            docker stop auto-scheduler || true
            docker rm auto-scheduler || true
            
            # Run new container
            docker run -d \
              --name auto-scheduler \
              --restart unless-stopped \
              -p 8000:8000 \
              -e SUPABASE_URL=${{ secrets.SUPABASE_URL }} \
              -e SUPABASE_KEY=${{ secrets.SUPABASE_KEY }} \
              -e REDIS_URL=${{ secrets.REDIS_URL }} \
              -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
              -e TIKTOK_API_KEY=${{ secrets.TIKTOK_API_KEY }} \
              -e INSTAGRAM_API_KEY=${{ secrets.INSTAGRAM_API_KEY }} \
              -e TWITTER_API_KEY=${{ secrets.TWITTER_API_KEY }} \
              ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          EOF

      - name: Health check
        run: |
          # Wait for the application to start
          sleep 30
          curl -f http://${{ secrets.SSH_HOST }}:8000/health || exit 1

      - name: Notify on success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: '🚀 Deployment successful! The application is now live at http://${{ secrets.SSH_HOST }}:8000'
            })

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: '❌ Deployment failed! Please check the logs.'
            }) 