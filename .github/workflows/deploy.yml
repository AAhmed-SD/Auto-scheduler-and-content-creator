name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: auto-scheduler
  ECS_SERVICE: auto-scheduler-service
  ECS_CLUSTER: auto-scheduler-cluster
  ECS_TASK_DEFINITION: auto-scheduler-task

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
        --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: auto-scheduler
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Get secrets from AWS Secrets Manager
      id: get-secrets
      run: |
        SUPABASE_URL=$(aws secretsmanager get-secret-value --secret-id supabase-url --query SecretString --output text)
        SUPABASE_KEY=$(aws secretsmanager get-secret-value --secret-id supabase-key --query SecretString --output text)
        OPENAI_API_KEY=$(aws secretsmanager get-secret-value --secret-id openai-api-key --query SecretString --output text)
        CLIP_API_KEY=$(aws secretsmanager get-secret-value --secret-id clip-api-key --query SecretString --output text)
        
        echo "SUPABASE_URL=$SUPABASE_URL" >> $GITHUB_ENV
        echo "SUPABASE_KEY=$SUPABASE_KEY" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=$OPENAI_API_KEY" >> $GITHUB_ENV
        echo "CLIP_API_KEY=$CLIP_API_KEY" >> $GITHUB_ENV

    - name: Update environment variables
      run: |
        aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} \
        --service ${{ env.ECS_SERVICE }} \
        --task-definition ${{ steps.task-def.outputs.task-definition-arn }} \
        --force-new-deployment

    - name: Verify deployment
      run: |
        echo "Deployment completed successfully"
        echo "New image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}" 