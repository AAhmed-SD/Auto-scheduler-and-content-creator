from typing import Any, Dict, List, Optional, Union
from fastapi import APIRouter
from ..models.user import User
from ..models.project import Project
from ..models.content import Content
from ..models.schedule import Schedule
from ..schemas.auth import Token, UserCreate, UserResponse
from ..schemas.project import ProjectCreate, ProjectUpdate, ProjectResponse
from ..schemas.content import ContentCreate, ContentUpdate, ContentResponse
from ..schemas.schedule import ScheduleCreate, ScheduleUpdate, ScheduleResponse

router = APIRouter()

# Auth routes
def register(user_data: UserCreate) -> UserResponse: ...
def login(form_data: Any) -> Token: ...
def get_current_user_info(current_user: User) -> UserResponse: ...
def update_user(user_data: UserCreate, current_user: User) -> UserResponse: ...
def delete_user(current_user: User) -> Dict[str, str]: ...

# Project routes
def create_project(project_data: ProjectCreate, current_user: User) -> ProjectResponse: ...
def get_project(project_id: int, current_user: User) -> ProjectResponse: ...
def get_user_projects(current_user: User) -> List[ProjectResponse]: ...
def update_project(project_id: int, project_data: ProjectUpdate, current_user: User) -> ProjectResponse: ...
def delete_project(project_id: int, current_user: User) -> Dict[str, str]: ...
def add_project_member(project_id: int, user_id: int, current_user: User) -> ProjectResponse: ...
def remove_project_member(project_id: int, user_id: int, current_user: User) -> ProjectResponse: ...

# Content routes
def create_content(content_data: ContentCreate, current_user: User) -> ContentResponse: ...
def get_content(content_id: int, current_user: User) -> ContentResponse: ...
def get_project_content(project_id: int, current_user: User) -> List[ContentResponse]: ...
def update_content(content_id: int, content_data: ContentUpdate, current_user: User) -> ContentResponse: ...
def delete_content(content_id: int, current_user: User) -> Dict[str, str]: ...
def get_scheduled_content(current_user: User, start_time: Optional[Any] = None, end_time: Optional[Any] = None) -> List[ContentResponse]: ...

# Schedule routes
def create_schedule(schedule_data: ScheduleCreate, current_user: User) -> ScheduleResponse: ...
def get_schedules(current_user: User, start_time: Optional[Any] = None, end_time: Optional[Any] = None) -> List[ScheduleResponse]: ...
def delete_schedule(schedule_id: int, current_user: User) -> Dict[str, str]: ... 